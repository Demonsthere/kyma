apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "name" . }}-proxy-reset
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ template "name" . }}-proxy-reset
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
  - apiGroups: ["apps"]
    resources: ["replicasets", "deployments", "daemonsets", "statefulsets"]
    verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ template "name" . }}-proxy-reset
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ template "name" . }}-proxy-reset
subjects:
  - kind: ServiceAccount
    name: {{ template "name" . }}-proxy-reset
    namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "name" . }}-proxy-reset
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: post-upgrade
spec:
  backoffLimit: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-proxy-reset
      restartPolicy: Never
      containers:
        - name: proxy-reset
          image: eu.gcr.io/kyma-project/test-infra/alpine-kubectl:v20200617-32c1f3ff
          command:
            - /bin/bash
            - -c
            - |
              pods=$(kubectl get po -A -o json | jq -rc '.items | .[] | select(.spec.containers | .[].image == "docker.io/istio/proxyv2:1.4.10-distroless") | "\(.metadata.name)/\(.metadata.namespace)"' )

              array=($(echo $pods | tr " " "\n"))


              for i in "${array[@]}"
              do
                namespacedName=($(echo $i | tr "/" "\n"))

                podName="${namespacedName[0]}"
                namespace="${namespacedName[1]}"

                podJson=$(kubectl get pod "${podName}" -n "${namespace}" -o json)

                parentObjectKind=$(jq -r '.metadata.ownerReferences[0].kind' <<< "${podJson}" | tr '[:upper:]' '[:lower:]')
                parentObjectName=$(jq -r '.metadata.ownerReferences[0].name' <<< "${podJson}")

                case "${parentObjectKind}" in
                ("")
                  echo "Pod ${podName} in namespace ${namespace} has no parent object. Skipping..."
                  continue
                  ;;
                ("replicaset")
                  parentDeployment=$(kubectl get "${parentObjectKind}" "${parentObjectName}" -n "${namespace}" -o jsonpath='{.metadata.ownerReferences[0].name}')
                  kubectl rollout restart deployment "${parentDeployment}" -n "${namespace}"
                  ;;
                (*)
                  kubectl rollout restart "${parentObjectKind}" "${parentObjectName}" -n "${namespace}"
                  ;;
                esac
              done
